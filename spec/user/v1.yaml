openapi: 3.0.3
info:
  title: User service
  description: |
    This service provides authentication and user data
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/user/v1'
    description: Localhost
paths:
  /auth:
    post:
      tags:
        - Auth
      responses:
        200:
          $ref: "#/components/responses/Auth"
        400:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      summary: Auth by phone
      description: Using the phone number user registers or logins to system
  /auth/refresh:
    post:
      tags:
        - Auth
      parameters:
        - in: header
          name: X-Refresh-Token
          schema:
            type: string
          description: Refresh token for renew access token
      responses:
        200:
          $ref: "#/components/responses/Auth"
        400:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      summary: Refresh auth token
      description: Refreshes the authentication token using the refresh token
  /profile:
    get:
      tags:
        - Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: Authorization token for accessing the profile
      responses:
        200:
          $ref: "#/components/responses/Profile"
        400:
          $ref: "#/components/responses/Error"
        401:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      summary: Profile
      description: Profile data
    post:
      tags:
        - Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: Authorization token for accessing the profile
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfile"
      summary: Update profile data
      description: Updates authenticated user's profile data
  /profile/photo:
    post:
      tags:
        - Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: Authorization token for accessing the profile
      responses:
        200:
          $ref: "#/components/responses/ProfilePhotoUpdated"
        400:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfilePhoto"
      summary: Update profile photo
      description: Updates authenticated user's profile photo
  /profile/passport:
    post:
      tags:
        - Profile
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: Authorization token for accessing the profile
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/Error"
        500:
          $ref: "#/components/responses/Error"
      requestBody:
        $ref: "#/components/requestBodies/UpdatePassport"
      summary: Update passport
      description: Updates authenticated user's passport data
components:
  requestBodies:
    Auth:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthRequestSchema"
    UpdateProfile:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateProfileRequestSchema"
    UpdateProfilePhoto:
      content:
        multipart/form-data:
          schema:
            properties:
              photo:
                type: array
                description: File to be uploaded
                items: {}
    UpdatePassport:
      content:
        multipart/form-data:
          schema:
            properties:
              country_id:
                type: string
                description: Selected country id
              region_id:
                type: string
                description: Selected region id for selected country id
              passport_photo:
                type: array
                description: File to be uploaded
                items: { }
  responses:
    Ok:
      description: Empty response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseSchema"
    Error:
      description: Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseSchema"
    Auth:
      description: Authentication response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ResponseSchema"
              - properties:
                  payload:
                    $ref: "#/components/schemas/AuthResponseSchema"
    Profile:
      description: Profile response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ResponseSchema"
              - properties:
                  payload:
                    $ref: "#/components/schemas/UserSchema"
    ProfilePhotoUpdated:
      description: Profile photo updated response
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ResponseSchema"
              - properties:
                  payload:
                    $ref: "#/components/schemas/UpdateProfilePhotoResponseSchema"
  schemas:
    AuthRequestSchema:
      description: Authorization request
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          description: User's phone number
          example: "+998901234567"
        otp:
          type: string
          description: One-time password which is sent to the phone
          example: "1234"
    AuthResponseSchema:
      description: Authentication response
      type: object
      properties:
        otp:
          type: object
          description: Otp response and it's expiring time
          properties:
            sent:
              type: boolean
              description: Is otp sent or not
            expires_at:
              type: string
              description: Expiring time of otp in UTC format
        auth:
          type: object
          description: Authentication data
          properties:
            access_token:
              type: string
              description: Authorization token to make requests
            refresh_token:
              type: string
              description: Refresh token to update access_token
        user:
          type: object
          description: User's data in the system
          properties:
            uuid:
              type: string
              description: User's system-wide universal unique id
            first_name:
              type: string
              description: First name of the user
            last_name:
              type: string
              description: Last name of the user
            email:
              type: string
              description: User's email address
            phone:
              type: string
              description: User's phone number
    UpdateProfileRequestSchema:
      description: Profile update request
      type: object
      properties:
        first_name:
          type: string
          description: first_name of the user
        last_name:
          type: string
          description: last_name of the user
        email:
          type: string
          description: email of the user
        phone:
          type: string
          description: phone of the user
        address:
          type: string
          description: address of the user
        about:
          type: string
          description: about of the user
        country_id:
          type: string
          description: country_id of the user
        region_id:
          type: string
          description: region_id of the user
    UpdateProfilePhotoResponseSchema:
      description: Response for updated profile photo
      type: object
      properties:
        url:
          type: string
          description: url of the uploaded photo
    UserSchema:
      description: User data
      type: object
      properties:
        uid:
          type: string
          description: uid of the user
        email:
          type: string
          description: email of the user
        first_name:
          type: string
          description: first_name of the user
        last_name:
          type: string
          description: last_name of the user
        phone:
          type: string
          description: phone of the user
        address:
          type: string
          description: address of the user
        photo_url:
          type: string
          description: photo_url of the user
        about:
          type: string
          description: about of the user
        country_id:
          type: string
          description: country_id of the user
        region_id:
          type: string
          description: region_id of the user
        passport_country_id:
          type: string
          description: passport_country_id of the user
        passport_serial_number:
          type: string
          description: passport_serial_number of the user
        passport_photo_url:
          type: string
          description: passport_photo_url of the user
    ResponseSchema:
      description: General response for whole API service
      type: object
      properties:
        ok:
          type: boolean
          readOnly: true
          description: If `true` response is success
          example: true
        code:
          type: integer
          readOnly: true
          description: Status of processed request
          example: 200
        message:
          type: string
          readOnly: true
          description: Status of processed request in text format
          example: "Success"
        payload:
          type: object
          readOnly: true
          description: Returned response from the server